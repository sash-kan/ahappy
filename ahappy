#!/bin/bash
# vim: ts=2 sw=2 et

# ahappy = administrator happy (generate good passwords)
# copyright (c) 2011,2012 alexander barakin aka sash-kan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# our alphabet
abc='!"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_\`abcdefghijklmnopqrstuvwxyz{|}~'

# read and apply rcfile
[ -f ~/.ahappyrc ] && . ~/.ahappyrc

# interpret multibyte characters as a sequence of bytes, not characters
export LC_ALL=C

# length of alphabet
abclen=${#abc}

do_work() {
  local phrase=$1
  # length of phrase
  phraselen=${#phrase}
  # get ord values of characters in phrase
  p=$(eval "$(echo "$phrase" | sed 's/[^\]/printf "%d " "'\''&";/g;s/\\/printf "%d " "'\''\\\\";/g')")
  for i in $(seq 2 $phraselen); do
    p=$(echo $p | sed -r 's/ ([^ ]+)$/)*256+\1/g;s/^/(/')
  done

  # now $p looks like "((((49)*256+50)*256+51)*256+52)*256+53" (if phrase="12345")
  #debug: echo $p

  # get sequence of numbers like "27 29 14 76 37 90" (if phrase="12345")
  numbers=$(echo "obase=${abclen};$p" | bc | sed -n 's/\\$//;H;${g;s/\n//g;p}')
  #debug:echo $numbers
  # treat this numbers as indexes in $abc
  result=$(echo $numbers | sed -r 's/0*([0-9]+)/${abc:\1:1}/g;s/ //g')
  # $result looks like:
  # ${abc:27:1}${abc:29:1}${abc:14:1}${abc:76:1}${abc:37:1}${abc:90:1}
  #debug: echo $result

  # eval this!
  # if phrase="12345", we get "<>/lFz"
  # cool, huh?
  eval echo "$result"
}

read_input() {
  read -r -s -p "enter phrase (empty line to quit): " p
  # empty input -> exit
  [ -n "$p" ] || return
  do_work $p
}

run_xclip() {
  $xclip -in -selection clipboard
}

interactive_loop() {
  while true; do
    # empty input -> exit
    r=$(read_input) || { echo; return 0; }
    echo
    echo $r
  done
}

if [ "$#" == 1 -a "$1" == "-i" ]; then
  interactive_loop
else
  xclip=$(type -P xclip)
  r=$?
  [ "$r" == 0 ] || { echo "you request to put result into x clipboard. but xclip not found"; exit $r; }
  p=$(read_input) || { echo; exit 0; }
  echo
  echo -n "$p" | run_xclip
  [ "$?" == 0 ] && { echo "the password is saved into x clipboard"; exit 0; }
fi

